-- Modern Tora-style UI Library
local Library = {}
Library.__index = Library

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local Player = Players.LocalPlayer

local Colors = {
    Main = Color3.fromRGB(30, 30, 30),
    Accent = Color3.fromRGB(255, 85, 255),
    Text = Color3.fromRGB(255, 255, 255),
    ToggleOn = Color3.fromRGB(85, 255, 127),
    ToggleOff = Color3.fromRGB(255, 85, 85),
    FolderHeader = Color3.fromRGB(50,50,50)
}

local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "ModernUILibrary"
ScreenGui.ResetOnSpawn = false
ScreenGui.Parent = game:GetService("CoreGui")

local ToggleKey = Enum.KeyCode.RightControl

-- Create window
function Library:CreateWindow(title)
    local self = setmetatable({}, Library)
    self.Title = title or "Window"
    self.Elements = {}
    self.Folders = {}

    local Frame = Instance.new("Frame")
    Frame.Size = UDim2.new(0, 400, 0, 300)
    Frame.Position = UDim2.new(0.5, -200, 0.5, -150)
    Frame.BackgroundColor3 = Colors.Main
    Frame.BorderSizePixel = 0
    Frame.Parent = ScreenGui
    self.Frame = Frame

    local TitleLabel = Instance.new("TextLabel")
    TitleLabel.Size = UDim2.new(1, 0, 0, 30)
    TitleLabel.BackgroundTransparency = 1
    TitleLabel.TextColor3 = Colors.Text
    TitleLabel.Text = self.Title
    TitleLabel.Font = Enum.Font.GothamBold
    TitleLabel.TextSize = 20
    TitleLabel.Parent = Frame

    -- Window toggle
    UserInputService.InputBegan:Connect(function(input, processed)
        if processed then return end
        if input.KeyCode == ToggleKey then
            Frame.Visible = not Frame.Visible
        end
    end)

    -- Add Folder function inside window
    function self:AddFolder(name)
        local folder = {}
        folder.Name = name
        folder.Elements = {}
        folder.Expanded = true

        local Header = Instance.new("TextButton")
        Header.Size = UDim2.new(1, -20, 0, 30)
        Header.Position = UDim2.new(0, 10, 0, 40 + (#self.Elements * 40))
        Header.BackgroundColor3 = Colors.FolderHeader
        Header.TextColor3 = Colors.Text
        Header.Text = "▶ "..name
        Header.Font = Enum.Font.GothamBold
        Header.TextSize = 16
        Header.Parent = Frame

        Header.MouseButton1Click:Connect(function()
            folder.Expanded = not folder.Expanded
            if folder.Expanded then
                Header.Text = "▼ "..name
                for _, e in ipairs(folder.Elements) do e.Object.Visible = true end
            else
                Header.Text = "▶ "..name
                for _, e in ipairs(folder.Elements) do e.Object.Visible = false end
            end
            self:Refresh()
        end)

        folder.Header = Header
        table.insert(self.Folders, folder)
        table.insert(self.Elements, {Type="Folder", Object=Header, Folder=folder})

        -- Add element methods for folder
        function folder:AddButton(text, callback)
            local Button = Instance.new("TextButton")
            Button.Size = UDim2.new(1, -40, 0, 30)
            Button.BackgroundColor3 = Colors.Accent
            Button.TextColor3 = Colors.Text
            Button.Text = text
            Button.Font = Enum.Font.GothamBold
            Button.TextSize = 16
            Button.Parent = Frame

            Button.MouseButton1Click:Connect(callback)

            local element = {Type="Button", Object=Button, Callback=callback, Folder=folder}
            table.insert(self.Elements, element)
            table.insert(folder.Elements, element)
            return element
        end

        function folder:AddToggle(text, default, callback)
            local Toggle = Instance.new("TextButton")
            Toggle.Size = UDim2.new(1, -40, 0, 30)
            Toggle.BackgroundColor3 = default and Colors.ToggleOn or Colors.ToggleOff
            Toggle.TextColor3 = Colors.Text
            Toggle.Text = text
            Toggle.Font = Enum.Font.GothamBold
            Toggle.TextSize = 16
            Toggle.Parent = Frame

            local toggled = default or false
            Toggle.MouseButton1Click:Connect(function()
                toggled = not toggled
                Toggle.BackgroundColor3 = toggled and Colors.ToggleOn or Colors.ToggleOff
                callback(toggled)
            end)

            local element = {Type="Toggle", Object=Toggle, Callback=callback, Value=toggled, Folder=folder}
            table.insert(self.Elements, element)
            table.insert(folder.Elements, element)
            return element
        end

        function folder:AddSlider(text, min, max, default, callback)
            local SliderFrame = Instance.new("Frame")
            SliderFrame.Size = UDim2.new(1, -40, 0, 30)
            SliderFrame.BackgroundColor3 = Colors.Main
            SliderFrame.BorderSizePixel = 0
            SliderFrame.Parent = Frame

            local SliderLabel = Instance.new("TextLabel")
            SliderLabel.Size = UDim2.new(1, 0, 1, 0)
            SliderLabel.BackgroundTransparency = 1
            SliderLabel.TextColor3 = Colors.Text
            SliderLabel.Text = text.." "..default
            SliderLabel.Font = Enum.Font.GothamBold
            SliderLabel.TextSize = 16
            SliderLabel.Parent = SliderFrame

            local dragging = false
            local SliderBar = Instance.new("Frame")
            SliderBar.Size = UDim2.new((default-min)/(max-min), 0, 1, 0)
            SliderBar.BackgroundColor3 = Colors.Accent
            SliderBar.BorderSizePixel = 0
            SliderBar.Parent = SliderFrame

            SliderFrame.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then dragging = true end
            end)
            SliderFrame.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then dragging = false end
            end)
            UserInputService.InputChanged:Connect(function(input)
                if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                    local mouseX = input.Position.X - SliderFrame.AbsolutePosition.X
                    local ratio = math.clamp(mouseX / SliderFrame.AbsoluteSize.X, 0, 1)
                    local value = math.floor((min + (max-min) * ratio))
                    SliderBar.Size = UDim2.new(ratio, 0, 1, 0)
                    SliderLabel.Text = text.." "..value
                    callback(value)
                end
            end)

            local element = {Type="Slider", Object=SliderFrame, Callback=callback, Value=default, Folder=folder}
            table.insert(self.Elements, element)
            table.insert(folder.Elements, element)
            return element
        end

        function folder:AddDropdown(text, options, callback)
            local DropdownFrame = Instance.new("Frame")
            DropdownFrame.Size = UDim2.new(1, -40, 0, 30)
            DropdownFrame.BackgroundColor3 = Colors.Main
            DropdownFrame.BorderSizePixel = 0
            DropdownFrame.Parent = Frame

            local DropdownLabel = Instance.new("TextButton")
            DropdownLabel.Size = UDim2.new(1, 0, 1, 0)
            DropdownLabel.BackgroundTransparency = 1
            DropdownLabel.TextColor3 = Colors.Text
            DropdownLabel.Text = text.." ▼"
            DropdownLabel.Font = Enum.Font.GothamBold
            DropdownLabel.TextSize = 16
            DropdownLabel.Parent = DropdownFrame

            local Open = false
            local OptionButtons = {}

            DropdownLabel.MouseButton1Click:Connect(function()
                Open = not Open
                if Open then
                    for i, option in ipairs(options) do
                        local btn = Instance.new("TextButton")
                        btn.Size = UDim2.new(1, 0, 0, 30)
                        btn.Position = UDim2.new(0, 0, 0, 30*i)
                        btn.BackgroundColor3 = Colors.Accent
                        btn.TextColor3 = Colors.Text
                        btn.Text = option
                        btn.Font = Enum.Font.GothamBold
                        btn.TextSize = 16
                        btn.Parent = DropdownFrame

                        btn.MouseButton1Click:Connect(function()
                            DropdownLabel.Text = text.." "..option.." ▼"
                            callback(option)
                            for _, b in ipairs(OptionButtons) do b:Destroy() end
                            Open = false
                        end)
                        table.insert(OptionButtons, btn)
                    end
                else
                    for _, b in ipairs(OptionButtons) do b:Destroy() end
                    OptionButtons = {}
                end
            end)

            local element = {Type="Dropdown", Object=DropdownFrame, Callback=callback, Folder=folder}
            table.insert(self.Elements, element)
            table.insert(folder.Elements, element)
            return element
        end

        return folder
    end

    -- Refresh method
    function self:Refresh()
        local yOffset = 40
        for _, e in ipairs(self.Elements) do
            local folder = e.Folder
            if folder then
                e.Object.Visible = folder.Expanded
            end
        end
        for _, e in ipairs(self.Elements) do
            if e.Object.Visible then
                e.Object.Position = UDim2.new(e.Object.Position.X.Scale, e.Object.Position.X.Offset, 0, yOffset)
                yOffset = yOffset + 40
            end
        end
    end

    -- Set method
    function self:Set(name, value)
        for _, element in ipairs(self.Elements) do
            if element.Object.Text and element.Object.Text:match(name) then
                if element.Type == "Toggle" then
                    element.Value = value
                    element.Object.BackgroundColor3 = value and Colors.ToggleOn or Colors.ToggleOff
                    element.Callback(value)
                elseif element.Type == "Slider" then
                    element.Value = value
                    element.Callback(value)
                elseif element.Type == "Dropdown" then
                    element.Callback(value)
                end
            end
        end
    end

    return self
end

return Library
